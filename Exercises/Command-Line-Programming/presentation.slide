Command Line Programming

Cory LaNou, gSchool
cory@galvanize.it
@corylanou

* Arguments - Defined

Args hold the command-line arguments, starting with the program name.

	var Args []string

.link http://golang.org/pkg/os/#pkg-variables Package Documentation - os Variables

* Arguments - Program Name

.play code/arguments/program-name.go

* Arguments - Argument Count

.play code/arguments/count.go

* Arguments - Enumerate

.play code/arguments/enumerate.go /START OMIT/,/END OMIT/

Results as if we ran a program called "enumerate" with the following flags

	enumerate -local u=admin --help

* The Flag Package

.play code/flags/flag.go /START OMIT/,/END OMIT/

.link http://golang.org/pkg/flag/ Package Documentation - Package Flag

The flag package is used for command line flag (argument) parsing.

* flag.Args

After calling flag.Parse(), flag.Args() will contain a slice of containing the "non-flag" arguments.

.play code/flags/flag_args.go /START OMIT/,/END OMIT/

Running the above program with the following arguments:

	-p=9000 foo=10 bar

* Invalid Flag Arguments

.play code/flags/flag_error.go /START OMIT/,/END OMIT/

Arguments passed:

	-p=foo

* FlagSets

FlagSets are used to define an entire set of parameters.  

They are usually only used when command -> sub command style of flags are going to be used.

.play code/flags/flag_sets_initial.go /START OMIT/,/END OMIT/

Running with `-h` argument

* FlagSets - Putting it all together

.play code/flags/flag_sets_final.go /START OMIT/,/END OMIT/

- -h
- -cmd=foo
- -cmd=foo -p=9001

* Flag Package Variables

There are a few very important variables in the flag package to pay attention to.

	flag.Usage

Allows you to overide the default message displayed when `-h` is passed into your program.

For more information, read up on the flag variables

.link http://golang.org/pkg/flag/#pkg-variables Flag Package Variables

* Help parameters

The help parameters are implicitly defined if you don't explicitly define them.

	-h
	--h
	-help
	--help

The above will all trigger usage and depending on the exit state, may cause your package to exit with an error.

Also notice long and short forms of arguments are treated the same in the flag package.

* fmt.Scanf

.code code/scanf/echo_color.go /START OMIT/,/END OMIT/

* bufio.Scanner

Scan one line of text and echo it out

.code code/scanf/echo_single.go /START OMIT/,/END OMIT/

* bufio.Scanner - loop

Echo forever

.code code/scanf/echo_loop.go /START OMIT/,/END OMIT/


* Putting it all together

- Lets create cat (but only kind of)

*Linux/Mac*

	mkdir -p $GOPATH/src/cat
	cd $GOPATH/src/cat
	touch main.go

*Windows*

	mkdir "%GOPATH%\src\cat"
	cd "%GOPATH%\src\cat"
	type NUL > main.go

* Basic Cat - Usage

.play code/cat/usage.go

* Basic Cat/Type

.play code/cat/cat.go /START OMIT/,/END OMIT/

* References

 ** - Denotes that the statement or code was taken directly from one of the following publications:

.link https://golang.org/ref/spec The Go Programming Language Specification
.link https://golang.org/doc/effective_go.html Effective Go
