Web Services API

Cory LaNou, gSchool
cory@galvanize.it
@corylanou


* What is a RESTful JSON API

.link http://jsonapi.org/ jsonapi.org - Lot of great info here

* CRUD

- Create
- Read
- Update
- Delete

* Setting up

*Linux/Mac*

	mkdir -p $GOPATH/src/api
	cd $GOPATH/src/api
	touch main.go

*Windows*

	mkdir "%GOPATH%\src\api"
	cd "%GOPATH%\src\api"
	type NUL > main.go


* Hello World as a Webserver

.code code/v1/main.go

* Add a better router

.code code/v2/main.go


* Why doesn't it run?

You will have to run:

	go get

to install the package "github.com/gorilla/mux"

*note*: No longer accepts anything for a route

* Create some basic routes

.code code/v3/main.go /START OMIT/,/END OMIT/

* Create a basic model

.code code/v4/todo.go

* Send back some json

.code code/v4/main.go /START IMPORT OMIT/,/END IMPORT OMIT/

.code code/v4/main.go /START INDEX OMIT/,/END INDEX OMIT/

* A better model

.code code/v5/todo.go

* Ok, we need to split this up across some files

- main.go
- handlers.go
- routes.go
- todo.go

* handlers.go

.code code/v6/handlers.go

* routes.go - part 1

.code code/v6/routes.go /START ONE OMIT/,/END ONE OMIT/

* routes.go - part 2

.code code/v6/routes.go /START TWO OMIT/,/END TWO OMIT/

* routes.go - part 3

.code code/v6/routes.go /START THREE OMIT/,/END THREE OMIT/

* main.go

.code code/v6/main.go


* Outputting log data

.code code/v7/logger.go

* Applying the logger filter

.code code/v7/routes.go /START OMIT/,/END OMIT/

* This routes file is crazy, lets refactor

- router.go
- routes.go

* New routes - part 1

.code code/v8/routes.go /START ONE OMIT/,/END ONE OMIT/

* New routes - part 2

.code code/v8/routes.go /START TWO OMIT/,/END TWO OMIT/

* router.go

.code code/v8/router.go

* The response code

.code code/v8/handlers.go /START OMIT/,/END OMIT/

* Wait, where is my database?

We don't have one for this excerise, so I created a "simulated one"

* Fake repo - part one

.code code/v9/repo.go /START ONE OMIT/,/END ONE OMIT/

* Fake repo - part two

.code code/v9/repo.go /START TWO OMIT/,/END TWO OMIT/

* Fake repo - part three

.code code/v9/repo.go /START THREE OMIT/,/END THREE OMIT/

* Create route

.code code/v9/routes.go /START OMIT/,/END OMIT/

* Create endpoint

.code code/v9/handlers.go /START CREATE OMIT/,/END CREATE OMIT/

* Modify TodoIndex endpoint

.code code/v9/handlers.go /START INDEX OMIT/,/END INDEX OMIT/


* Add Id to your Todo struct

.code code/v9/todo.go

* Test it

	curl -H "Content-Type: application/json" -d '{"name":"New Todo"}' http://localhost:8080/todos

Or use

.link https://apigee.com/console/others Apigee API console

* Things we didn't do

- Authentication - JWT
- eTags

* What is left

LOTS of refactoring!

- Package for JSON helpers (sending/receiving)
- Package for the Router/Routes
- Testing... lots and lots of testing!

