Go Primer

Cory LaNou, gSchool
cory@galvanize.it
@corylanou

Levi Cook, gSchool
levi@galvanize.it
@levicook

#-------------------------------------------------
* Welcome!


#-------------------------------------------------
* Format

Hands on learning!

- I do
- We do
- You do


#-------------------------------------------------
* Packages
todo: preamble...

* Packages: I do
.play code/hello.go


#-------------------------------------------------
* Imports
todo: preamble...

* Imports: I do
.play code/hello.go


#-------------------------------------------------
* Packages and Imports: We do
.play code/hello-wedo.go


#-------------------------------------------------
* Exported Names
todo: preamble...

* Exported Names: I do
.play code/hello.go


#-------------------------------------------------
* Types
Type
A type determines the set of values and operations for all values of that type.

#-------------------------------------------------
* Boolean types
todo: preamble...

?? Types may be named or unnamed.

#-------------------------------------------------
* Functions
todo: preamble...

* Functions: I do


#-------------------------------------------------
* Named Results
todo: preamble...

* Named Results: I do


#-------------------------------------------------
* Multiple Results
todo: preamble...

* Multiple Results: I do


#-------------------------------------------------
* Functions and Results : We do


#-------------------------------------------------
* Constants

Constants in Go are created at compile time, and can only be numbers, characters(runes), strings or booleans. They can not refer to a function that needs to be called at compile time.

* Constants: I do

.play code/constants-i-do.go /START OMIT/,/END OMIT/

* Constants: Extra Credit

.link topics/constants/constants.slide The rest of the story


#-------------------------------------------------
* Variables

Variables are initialized just like constants, but are computed at run time.

* Variables: I do

.play code/variables-i-do.go /START OMIT/,/END OMIT/

* Variables: Extra Credit

.link topics/variables/variables.slide The rest of the story


#-------------------------------------------------
* Basic Types

- Boolean
- Numeric
- String
- Array
- Slice
- Struct
- Pointer
- Function
- Interface
- Map
- Channel

_All_types_have_a_default_value._


* Basic Types (cont)
.iframe basic-types.txt 300 300

* Basic Types: I do

.play code/basic-types-i-do.go /START OMIT/,/END OMIT/

* Basic Types: Extra Credit

For an in depth look at types:

.link http://golang.org/ref/spec#Types Language Specification for Types

#-------------------------------------------------
* Type Conversions
todo: preamble...

* Type Conversions: I do


#-------------------------------------------------

* Constants, Variables, Types, Type Conversions: We Do

* Constants, Variables, Types, Type Conversions: You Do

#-------------------------------------------------
* If Statements

"If" statements specify the conditional execution of two branches according to the value of a *boolean*expression*.  If the expression evaluates to true, the "if" branch is executed, otherwise, if present, the "else" branch is executed.**

* If  Statements: I Do
.play public/exercises/if-statements/todo/max.go /START OMIT/,/END OMIT/

* If  Statements: We Do
.play code/if-statement-01-todo.go /START OMIT/,/END OMIT/

* If  Statements: Done
.play code/if-statement-01-done.go /START OMIT/,/END OMIT/

# * If  Statements: I Do (cont)
# 
# *With*initialization*
# 
# .play code/if-statement-02-i-do.go /START OMIT/,/END OMIT/

#-------------------------------------------------
* Switch Statements

"Switch" statements provide multi-way execution. An expression or type specifier is compared to the "cases" inside the "switch" to determine which branch to execute.**

* Switch Statements: I do

Switch on condition

.play code/switch-01-i-do.go /START OMIT/,/END OMIT/

* Switch Statements: I do (cont)

Switch with no condition

.play code/switch-02-i-do.go /START OMIT/,/END OMIT/

* Switch Statements: Extra Credit

.link topics/switch/switch.slide The rest of the story


#-------------------------------------------------
* Looping - For Statements

A "for" statement specifies repeated execution of a block. The iteration is controlled by a condition, a "for" clause, or a "range" clause.**

	// Like a C for
	for init; condition; post { }

	// Like a C while
	for condition { }

	// Like a C for(;;)
	for { }

* Looping - For Statements: I do

Traditional C Loop

.play code/loops-01-i-do.go /START OMIT/,/END OMIT/

* Looping - For Statements: I do (cont)

"While"in Go

.play code/loops-02-i-do.go /START OMIT/,/END OMIT/

* Looping - For Statements: I do (cont)

Infinite Loop

.play code/loops-03-i-do.go /START OMIT/,/END OMIT/



* Looping - For Statements: Extra Credit

.link topics/loops/loops.slide The rest of the story


#-------------------------------------------------
* Structs
todo: preamble...

* Structs: I do


#-------------------------------------------------
* Struct Fields
todo: preamble...

* Struct Fields: I do


#-------------------------------------------------
* Struct Literals
todo: preamble...

* Struct Literals: I do


#-------------------------------------------------
* Pointers
todo: preamble...

* Pointers: I do

#-------------------------------------------------
* new
todo: preamble...

* new: I do


#-------------------------------------------------
* Arrays
todo: preamble...

* Arrays: I do


#-------------------------------------------------
* Slices
todo: preamble...

* Slices: I do


#-------------------------------------------------
* Slicing
todo: preamble...

* Slicing: I do


#-------------------------------------------------
* make
todo: preamble...

* make: I do


#-------------------------------------------------
* range
todo: preamble...

* range: I do


#-------------------------------------------------
* Maps
todo: preamble...

* Maps: I do


#-------------------------------------------------
* Map literals
todo: preamble...

* Map literals: I do


#-------------------------------------------------
* Function Values
todo: preamble...

* Function Values: I do


#-------------------------------------------------
* Function Closures
todo: preamble...

* Function Closures: I do


#-------------------------------------------------
* Methods
todo: preamble...


#-------------------------------------------------
* Methods with pointer receivers
todo: preamble...


#-------------------------------------------------
* Interfaces
todo: preamble...

#-------------------------------------------------
* Scope
todo: preamble...

#-------------------------------------------------
* Errors
todo: preamble...

#-------------------------------------------------
* Testing
.play code/testing.go /START OMIT/,/END OMIT/

#-------------------------------------------------
* References

 ** - Denotes that the statement or code was taken directly from one of the following publications:

.link https://golang.org/ref/spec The Go Programming Language Specification
.link https://golang.org/doc/effective_go.html Effective Go
