Go Primer

Cory LaNou, gSchool
cory@galvanize.it
@corylanou

Levi Cook, gSchool
levi@galvanize.it
@levicook

#-------------------------------------------------
* Welcome!


#-------------------------------------------------
* Format
- I do.
- We do.
- You do.


#-------------------------------------------------
* Packages
todo: preamble...

* Packages: I do
.play code/hello.go


#-------------------------------------------------
* Imports
todo: preamble...

* Imports: I do
.play code/hello.go


#-------------------------------------------------
* Packages and Imports: We do - 5 minutes
.play code/hello-wedo.go


#-------------------------------------------------
* Exported Names
todo: preamble...

* Exported Names: I do - 2 minutes
.play code/hello.go


#-------------------------------------------------
* Functions
todo: preamble...

* Functions: I do - 5 minutes


#-------------------------------------------------
* Named Results
todo: preamble...

* Named Results: I do - 2 minutes


#-------------------------------------------------
* Multiple Results
todo: preamble...

* Multiple Results: I do - 2 minutes


#-------------------------------------------------
* Functions and Results : We do - 10 minutes


#-------------------------------------------------
* Constants

Constants in Go are created at compile time, and can only be numbers, characters(runes), strings or booleans. They can not refer to a function that needs to be called at compile time.

* Constants: I do - 2 minutes

.play code/constants-i-do.go /START OMIT/,/END OMIT/

* Constants: Extra Credit

.link /Topics/Constants/constants.slide The rest of the story


#-------------------------------------------------
* Variables

Variables are initialized just like constants, but are computed at run time.

* Variables: I do - 2 minutes

.play code/variables-i-do.go /START OMIT/,/END OMIT/

* Variables: Extra Credit

.link /Topics/Variables/variables.slide The rest of the story


#-------------------------------------------------
* Basic Types

- Boolean
- Numeric
- String
- Array
- Slice
- Struct
- Pointer
- Function
- Interface
- Map
- Channel

_All_types_have_a_default_value._


* Basic Types (cont)
.iframe basic-types.txt 300 300

* Basic Types: I do - 2 minutes

.play code/basic-types-i-do.go /START OMIT/,/END OMIT/

* Basic Types: Extra Credit

For an in depth look at types:

.link http://golang.org/ref/spec#Types Language Specification for Types

#-------------------------------------------------
* Type Conversions
todo: preamble...

* Type Conversions: I do - 2 minutes


#-------------------------------------------------

* Constants, Variables, Types, Type Conversions: We Do
_10_minutes_

* Constants, Variables, Types, Type Conversions: You Do
_10_minutes_

#-------------------------------------------------
* If Conditionals: I Do
_2_minutes_

.play code/if-conditionals-01-i-do.go /START OMIT/,/END OMIT/

* If Conditionals: I Do (cont)
_2_minutes_

*With*initialization*

.play code/if-conditionals-02-i-do.go /START OMIT/,/END OMIT/

#-------------------------------------------------
* Switch Conditionals: I do
_2_minutes_

.play code/switch-01-i-do.go /START OMIT/,/END OMIT/

* Switch Conditionals: I do (cont)
_2_minutes_

.play code/switch-02-i-do.go /START OMIT/,/END OMIT/

* Switch Conditionals: Extra Credit

.link /Topics/Switch/switch.slide The rest of the story


#-------------------------------------------------
* Loops: I do
_2_minutes_

.play code/loops-01-i-do.go /START OMIT/,/END OMIT/

* Loops: I do (cont)
_2_minutes_

.play code/loops-02-i-do.go /START OMIT/,/END OMIT/


* Loops: Extra Credit

.link /Topics/Loops/loops.slide The rest of the story


#-------------------------------------------------
* Structs
todo: preamble...

* Structs: I do - 2 minutes


#-------------------------------------------------
* Struct Fields
todo: preamble...

* Struct Fields: I do - 2 minutes


#-------------------------------------------------
* Struct Literals
todo: preamble...

* Struct Literals: I do - 2 minutes


#-------------------------------------------------
* Pointers
todo: preamble...

* Pointers: I do - 2 minutes

#-------------------------------------------------
* new
todo: preamble...

* new: I do - 2 minutes


#-------------------------------------------------
* Arrays
todo: preamble...

* Arrays: I do - 2 minutes


#-------------------------------------------------
* Slices
todo: preamble...

* Slices: I do - 2 minutes


#-------------------------------------------------
* Slicing
todo: preamble...

* Slicing: I do - 2 minutes


#-------------------------------------------------
* make
todo: preamble...

* make: I do - 2 minutes


#-------------------------------------------------
* range
todo: preamble...

* range: I do - 2 minutes


#-------------------------------------------------
* Maps
todo: preamble...

* Maps: I do - 2 minutes


#-------------------------------------------------
* Map literals
todo: preamble...

* Map literals: I do - 2 minutes


#-------------------------------------------------
* Function Values
todo: preamble...

* Function Values: I do - 2 minutes


#-------------------------------------------------
* Function Closures
todo: preamble...

* Function Closures: I do - 2 minutes


#-------------------------------------------------
* Methods
todo: preamble...


#-------------------------------------------------
* Methods with pointer receivers
todo: preamble...


#-------------------------------------------------
* Interfaces
todo: preamble...


#-------------------------------------------------
* Errors
todo: preamble...
